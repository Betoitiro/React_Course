1-> Estados do Hook:
    response: Armazena o estado da operação de atualização.
    loading: Indica se a operação de atualização está em andamento.
    error: Armazena mensagens de erro durante a operação.

2-> Hook useUpdateDocument:
    Utiliza o hook useReducer para gerenciar os estados da operação de atualização.
    Utiliza o estado cancelled para lidar com vazamento de memória.

3-> Reducer updateReducer:
    Gerencia os estados loading e error com base nas ações:
    "LOADING": Define loading como verdadeiro e limpa error.
    "UPDATED_DOC": Define loading como falso e limpa error.
    "ERROR": Define loading como falso e armazena a mensagem de erro em error.

4-> Função checkCancelBeforeDispatch:
    Verifica se a operação foi cancelada antes de despachar uma ação para o reducer.

5-> Função updateDocument:
    Aciona a ação "LOADING" antes de iniciar a atualização.
    Obtém a referência ao documento usando doc.
    Atualiza o documento usando updateDoc com os novos dados fornecidos.
    Em caso de sucesso, aciona a ação "UPDATED_DOC" com o documento atualizado.
    Em caso de erro, loga o erro e aciona a ação "ERROR" com a mensagem de erro.

6-> Efeito para Lidar com Vazamento de Memória:
    Utiliza o hook useEffect para lidar com o vazamento de memória, onde define uma função de 
    retorno que cancela a operação ao desmontar o componente.

7-> Retorno do Hook:
    Retorna um objeto contendo a função updateDocument para atualização de documentos e o estado 
    response para acompanhar o progresso da operação.